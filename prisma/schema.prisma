generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  company        String?
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  articles       Article[]
  comments       Comment[]
  likes          Like[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id              Int       @id @default(autoincrement())
  date            DateTime  @default(now())
  title           String    @unique
  summary         String    @db.Text
  text            String    @db.MediumText
  userId          String
  categoryId      Int
  image           String?
  tags            String?
  commentsEnabled Boolean   @default(true)
  category        Category  @relation(fields: [categoryId], references: [id])
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments        Comment[]
  likes           Like[]

  @@index([categoryId], map: "Article_categoryId_fkey")
  @@index([userId], map: "Article_userId_fkey")
}

model Category {
  id       Int       @id @default(autoincrement())
  parentId Int?
  name     String    @unique
  articles Article[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  text      String   @db.Text
  userId    String
  articleId Int
  article   Article  @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([articleId], map: "Comment_articleId_fkey")
  @@index([userId], map: "Comment_userId_fkey")
}

model Like {
  id        Int     @id @default(autoincrement())
  userId    String
  articleId Int
  article   Article @relation(fields: [articleId], references: [id])
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([articleId], map: "Like_articleId_fkey")
  @@index([userId], map: "Like_userId_fkey")
}

model Page {
  id    Int      @id @default(autoincrement())
  date  DateTime @default(now())
  title String   @unique
  text  String   @db.Text
}

model Project {
  id           Int      @id @default(autoincrement())
  date         DateTime @default(now())
  title        String   @unique
  text         String   @db.Text
  tools        String
  url          String
  thumbnailUrl String
}

model Airports {
  id                Int       @id @default(autoincrement())
  ident             String?
  type              String?
  name              String?
  latitude_deg      Float?
  longitude_deg     Float?
  elevation_ft      Int?
  continent         String?
  iso_country       String
  iso_region        String?
  municipality      String?
  scheduled_service String?
  gps_code          String?
  iata_code         String?
  local_code        String?
  home_link         String?
  wikipedia_link    String?
  keywords          String?   @db.VarChar(1000)
  country           Countries @relation(fields: [iso_country], references: [code])
  region            Regions?  @relation(fields: [iso_region], references: [code])

  @@index([iso_country], map: "Airports_iso_country_fkey")
  @@index([iso_region], map: "Airports_iso_region_fkey")
}

model Countries {
  id             Int        @id @default(autoincrement())
  code           String     @unique
  name           String?
  continent      String?
  wikipedia_link String?
  keywords       String?
  Airports       Airports[]
}

model Regions {
  id             Int        @id @default(autoincrement())
  code           String     @unique
  local_code     String?
  name           String
  continent      String
  iso_country    String
  wikipedia_link String?
  keywords       String?
  Airports       Airports[]
}

model Frequencies {
  id            Int     @id @default(autoincrement())
  airport_ref   Int?
  airport_ident String?
  type          String?
  description   String?
  frequency_mhz Float?
}

model Navaids {
  id                     Int     @id @default(autoincrement())
  filename               String?
  ident                  String?
  name                   String?
  type                   String?
  frequency_khz          Int?
  latitude_deg           Float?
  longitude_deg          Float?
  elevation_ft           Int?
  iso_country            String?
  dme_frequency_khz      Int?
  dme_channel            String?
  dme_latitude_deg       Float?
  dme_longitude_deg      Float?
  dme_elevation_ft       Int?
  slaved_variation_deg   Float?
  magnetic_variation_deg Float?
  usageType              String?
  power                  String?
  associated_airport     String?
}

model Runways {
  id                        Int     @id @default(autoincrement())
  airport_ref               Int?
  airport_ident             String?
  length_ft                 Int?
  width_ft                  Int?
  surface                   String?
  lighted                   Int?
  closed                    Int?
  le_ident                  String?
  le_latitude_deg           Float?
  le_longitude_deg          Float?
  le_elevation_ft           Int?
  le_heading_degT           Float?
  le_displaced_threshold_ft Int?
  he_ident                  String?
  he_latitude_deg           Float?
  he_longitude_deg          Float?
  he_elevation_ft           Int?
  he_heading_degT           Int?
  he_displaced_threshold_ft Int?
}
